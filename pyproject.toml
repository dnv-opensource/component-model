[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
only-include = [
    "src/component_model",
    "tests",
    ".coveragerc",
    ".editorconfig",
    ".pre-commit-config.yaml",
    "manage.py",
    "pyproject.toml",
    "pytest.ini",
    "ruff.toml",
    "uv.lock",
]

[tool.hatch.build.targets.wheel]
packages = [
    "src/component_model",
]

[project]
name = "component-model"
version = "0.1.0"
description = "Constructs a Functional Mockup Interface component model from a python script (fulfilling some requirements)."
readme = "README.rst"
requires-python = ">= 3.10, < 3.14"
license = { file = "LICENSE" }
authors = [
    { name = "Siegfried Eisinger", email = "Siegfried.Eisinger@dnv.com" },
]
keywords = [
    "simulation",
    "model",
    "FMI",
    "OSP",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "numpy>=1.26; python_version < '3.13'",
    "numpy>=2.2; python_version >= '3.13'",
    "matplotlib>=3.10",
    "pint>=0.24",
    "sympy>=1.13",
    "jsonpath-ng>=1.7.0",
    "libcosimpy==0.0.2",
    "fmpy>=0.3.21",
    "pythonfmu>=0.6.5",
    "flexparser<0.4",
    "pdfminer>=20191125",
    "pypdf2>=3.0.1",
]

[project.optional-dependencies]
modelTest = [
    "fmpy>=0.3.21",
    "sim-explorer>=0.2",
]
rest = [
    "docutils>=0.21",
]
editor = [
    "thonny>=4.1",
]

[project.urls]
Homepage = "https://github.com/dnv-opensource/component-model"
Documentation = "https://dnv-opensource.github.io/component-model/README.html"
Repository = "https://github.com/dnv-opensource/component-model.git"
Issues = "https://github.com/dnv-opensource/component-model/issues"
Changelog = "https://github.com/dnv-opensource/component-model/blob/main/CHANGELOG.md"


[dependency-groups]
dev = [
    "pytest>=8.3",
    "pytest-cov>=6.0",
    "ruff>=0.9.2",
    "pyright>=1.1.392",
    "mypy>=1.14",
    "sourcery>=1.31",
    "pre-commit>=4.0",
    "Sphinx>=8.1",
    "sphinx-argparse-cli>=1.19",
    "sphinx-autodoc-typehints>=3.0",
    "sphinxcontrib-mermaid>=1.0.0",
    "myst-parser>=4.0",
    "furo>=2024.8",
    "jupyter>=1.1",
]

[tool.uv]
default-groups = [
    "dev",
]
native-tls = true


[tool.mypy]
plugins = [
    "numpy.typing.mypy_plugin",
]
mypy_path = "stubs"
files = [
    "src",
    "tests",
    "examples",
]
exclude = [
    "^src/folder_to_be_excluded/",
]
check_untyped_defs = true
disable_error_code = [
    "misc",
    "import-untyped",
]


[tool.pyright]
stubPath = "stubs"
include = [
    "src",
    "tests",
    "examples",
]
exclude = [
    "tests/test_working_directory",
]

typeCheckingMode = "basic"
useLibraryCodeForTypes = true
reportMissingParameterType = "error"
reportUnknownParameterType = "warning"
reportUnknownMemberType = "warning"                # consider to set to `false` if you work a lot with matplotlib and pandas, which are both not properly typed and known to trigger this warning
reportMissingTypeArgument = "error"
reportPropertyTypeMismatch = "error"
reportFunctionMemberAccess = "warning"
reportPrivateUsage = "warning"
reportTypeCommentUsage = "warning"
reportIncompatibleMethodOverride = "warning"
reportIncompatibleVariableOverride = "error"
reportInconsistentConstructor = "error"
reportOverlappingOverload = "warning"
reportUninitializedInstanceVariable = "warning"
reportCallInDefaultInitializer = "warning"
reportUnnecessaryIsInstance = "information"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnusedCallResult = "warning"
reportUnusedExpression = "warning"
reportMatchNotExhaustive = "warning"
reportShadowedImports = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "warning"
reportUnnecessaryTypeIgnoreComment = "information"
# Activate the following rules only locally and temporary, i.e. for a QA session.
# (For server side CI they are considered too strict.)
# reportMissingTypeStubs = true
# reportConstantRedefinition = "warning"
# reportImportCycles = "warning"
# reportImplicitStringConcatenation = "warning"
